/*
    - position: relative;
        Important to use, because each HTML element wouldn't inherit the 
        properties from it.

    - height: 100%;
        Important to use, because the HTML content would be that high as the content
        and this way the child elements couldn't use 100% height properties.

    - margin: 0;
        Optional, but if you don't set it to 0, then you have to calculate the 
        margin-bottom substraction with the default/set html/body margin.
*/
html, body {
    position: relative;
    height: 100%;
    margin: 0;
}

/*
    - height: 50px; 
        It's height is not important to be static. It can be as high as the content in it.
        The height setup is optional.
*/
.site.header {
    height: 50px;
    
    /* Representative property, not IMPORTANT! */
    background: #f77;
}

/*
    - position: relative; 
        Important, because its children must be compared to this element.

    - min-height: 100%; 
        The element minimum height must be 100%.
*/
.wrapper {
    position: relative;
    min-height: 100%;
        
    /* Representative property, not IMPORTANT! */
    background: #7f7;
}

/*
    - padding-bottom: 50px; 
        This must be equal to the height of footer (with margin, border and so on...).
*/
.site.content {
    padding-bottom: 50px;
}

/*
    - position: absolute; 
        Important, because this element must be positioned compared to the wrapper
        to the bottom.

    - bottom: 0; 
        This places the footer element to the bottom of screen.

    - width: 100%;
        The element on absolute position will be as wide as its content.
        That's why we have to make it as wide as the screen.

    - height: 50px;
        The footer's hegiht I talked about before.
*/
.site.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 50px;
        
    /* Representative property, not IMPORTANT! */
    background: #77f;
}